// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { RootData, RootResponse2, HealthData, HealthResponse, RdData, RdResponse, GenerateapikeyData, GenerateapikeyResponse, ServicesData, ServicesResponse, TraktOauthInitiateData, TraktOauthInitiateResponse, TraktOauthCallbackData, TraktOauthCallbackResponse, TraktOauthCallbackError, StatsData, StatsResponse2, LogsData, LogsResponse, EventsData, EventsResponse, MountData, MountResponse, UploadLogsData, UploadLogsResponse2, GetStatesData, GetStatesResponse, GetItemsData, GetItemsResponse, GetItemsError, AddItemsData, AddItemsResponse, AddItemsError, GetItemData, GetItemResponse, GetItemError, GetItemsByImdbIdsData, GetItemsByImdbIdsResponse, GetItemsByImdbIdsError, ResetItemsData, ResetItemsResponse, ResetItemsError, RetryItemsData, RetryItemsResponse, RetryItemsError, RemoveItemData, RemoveItemResponse, RemoveItemError, GetItemStreamsApiV1ItemsItemIdStreamsGetData, GetItemStreamsApiV1ItemsItemIdStreamsGetError, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostError, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostError, ScrapeItemData, ScrapeItemResponse2, ScrapeItemError, StartManualSessionApiV1ScrapeScrapeStartSessionPostData, StartManualSessionApiV1ScrapeScrapeStartSessionPostResponse, StartManualSessionApiV1ScrapeScrapeStartSessionPostError, ManualSelectData, ManualSelectResponse, ManualSelectError, ManualUpdateAttributesData, ManualUpdateAttributesResponse, ManualUpdateAttributesError, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostData, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostResponse, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostError, CompleteManualSessionData, CompleteManualSessionResponse, CompleteManualSessionError, GetSettingsSchemaData, GetSettingsSchemaResponse, LoadSettingsData, LoadSettingsResponse, SaveSettingsData, SaveSettingsResponse, GetAllSettingsData, GetAllSettingsResponse, GetSettingsData, GetSettingsResponse, GetSettingsError, SetAllSettingsData, SetAllSettingsResponse, SetAllSettingsError, SetSettingsData, SetSettingsResponse, SetSettingsError, OverseerrApiV1WebhookOverseerrPostData, OverseerrApiV1WebhookOverseerrPostResponse, GetEventTypesApiV1StreamEventTypesGetData, StreamEventsApiV1StreamEventTypeGetData, StreamEventsApiV1StreamEventTypeGetResponse, StreamEventsApiV1StreamEventTypeGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

export class DefaultService {
    /**
     * Root
     */
    public static root<ThrowOnError extends boolean = false>(options?: Options<RootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RootResponse2, unknown, ThrowOnError>({
            url: '/api/v1/',
            ...options
        });
    }
    
    /**
     * Health
     */
    public static health<ThrowOnError extends boolean = false>(options?: Options<HealthData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<HealthResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/health',
            ...options
        });
    }
    
    /**
     * Get Rd User
     */
    public static rd<ThrowOnError extends boolean = false>(options?: Options<RdData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<RdResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/rd',
            ...options
        });
    }
    
    /**
     * Generate Apikey
     */
    public static generateapikey<ThrowOnError extends boolean = false>(options?: Options<GenerateapikeyData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GenerateapikeyResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/generateapikey',
            ...options
        });
    }
    
    /**
     * Get Services
     */
    public static services<ThrowOnError extends boolean = false>(options?: Options<ServicesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ServicesResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/services',
            ...options
        });
    }
    
    /**
     * Initiate Trakt Oauth
     */
    public static traktOauthInitiate<ThrowOnError extends boolean = false>(options?: Options<TraktOauthInitiateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<TraktOauthInitiateResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/trakt/oauth/initiate',
            ...options
        });
    }
    
    /**
     * Trakt Oauth Callback
     */
    public static traktOauthCallback<ThrowOnError extends boolean = false>(options: Options<TraktOauthCallbackData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<TraktOauthCallbackResponse, TraktOauthCallbackError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/trakt/oauth/callback',
            ...options
        });
    }
    
    /**
     * Get Stats
     */
    public static stats<ThrowOnError extends boolean = false>(options?: Options<StatsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<StatsResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/stats',
            ...options
        });
    }
    
    /**
     * Get Logs
     */
    public static logs<ThrowOnError extends boolean = false>(options?: Options<LogsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<LogsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/logs',
            ...options
        });
    }
    
    /**
     * Get Events
     */
    public static events<ThrowOnError extends boolean = false>(options?: Options<EventsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<EventsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/events',
            ...options
        });
    }
    
    /**
     * Get Rclone Files
     * Get all files in the rclone mount.
     */
    public static mount<ThrowOnError extends boolean = false>(options?: Options<MountData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<MountResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/mount',
            ...options
        });
    }
    
    /**
     * Upload Logs
     * Upload the latest log file to paste.c-net.org
     */
    public static uploadLogs<ThrowOnError extends boolean = false>(options?: Options<UploadLogsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<UploadLogsResponse2, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/upload_logs',
            ...options
        });
    }
    
    /**
     * Overseerr
     * Webhook for Overseerr
     */
    public static overseerrApiV1WebhookOverseerrPost<ThrowOnError extends boolean = false>(options?: Options<OverseerrApiV1WebhookOverseerrPostData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<OverseerrApiV1WebhookOverseerrPostResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/webhook/overseerr',
            ...options
        });
    }
    
}

export class ItemsService {
    /**
     * Get States
     */
    public static getStates<ThrowOnError extends boolean = false>(options?: Options<GetStatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetStatesResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/states',
            ...options
        });
    }
    
    /**
     * Retrieve Media Items
     * Fetch media items with optional filters and pagination
     */
    public static getItems<ThrowOnError extends boolean = false>(options?: Options<GetItemsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemsResponse, GetItemsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items',
            ...options
        });
    }
    
    /**
     * Add Media Items
     * Add media items with bases on imdb IDs
     */
    public static addItems<ThrowOnError extends boolean = false>(options?: Options<AddItemsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<AddItemsResponse, AddItemsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/add',
            ...options
        });
    }
    
    /**
     * Retrieve Media Item
     * Fetch a single media item by ID
     */
    public static getItem<ThrowOnError extends boolean = false>(options: Options<GetItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetItemResponse, GetItemError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }
    
    /**
     * Retrieve Media Items By IMDb IDs
     * Fetch media items by IMDb IDs
     */
    public static getItemsByImdbIds<ThrowOnError extends boolean = false>(options: Options<GetItemsByImdbIdsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetItemsByImdbIdsResponse, GetItemsByImdbIdsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{imdb_ids}',
            ...options
        });
    }
    
    /**
     * Reset Media Items
     * Reset media items with bases on item IDs
     */
    public static resetItems<ThrowOnError extends boolean = false>(options: Options<ResetItemsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ResetItemsResponse, ResetItemsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/reset',
            ...options
        });
    }
    
    /**
     * Retry Media Items
     * Retry media items with bases on item IDs
     */
    public static retryItems<ThrowOnError extends boolean = false>(options: Options<RetryItemsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<RetryItemsResponse, RetryItemsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/retry',
            ...options
        });
    }
    
    /**
     * Remove Media Items
     * Remove media items based on item IDs
     */
    public static removeItem<ThrowOnError extends boolean = false>(options: Options<RemoveItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<RemoveItemResponse, RemoveItemError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/remove',
            ...options
        });
    }
    
    /**
     * Get Item Streams
     */
    public static getItemStreamsApiV1ItemsItemIdStreamsGet<ThrowOnError extends boolean = false>(options: Options<GetItemStreamsApiV1ItemsItemIdStreamsGetData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<unknown, GetItemStreamsApiV1ItemsItemIdStreamsGetError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{item_id}/streams',
            ...options
        });
    }
    
    /**
     * Blacklist Stream
     */
    public static blacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPost<ThrowOnError extends boolean = false>(options: Options<BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, BlacklistStreamApiV1ItemsItemIdStreamsStreamIdBlacklistPostError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{item_id}/streams/{stream_id}/blacklist',
            ...options
        });
    }
    
    /**
     * Unblacklist Stream
     */
    public static unblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPost<ThrowOnError extends boolean = false>(options: Options<UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, UnblacklistStreamApiV1ItemsItemIdStreamsStreamIdUnblacklistPostError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{item_id}/streams/{stream_id}/unblacklist',
            ...options
        });
    }
    
}

export class ScrapeService {
    /**
     * Get streams for an item
     */
    public static scrapeItem<ThrowOnError extends boolean = false>(options: Options<ScrapeItemData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<ScrapeItemResponse2, ScrapeItemError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/scrape/scrape/{id}',
            ...options
        });
    }
    
    /**
     * Start Manual Session
     */
    public static startManualSessionApiV1ScrapeScrapeStartSessionPost<ThrowOnError extends boolean = false>(options: Options<StartManualSessionApiV1ScrapeScrapeStartSessionPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<StartManualSessionApiV1ScrapeScrapeStartSessionPostResponse, StartManualSessionApiV1ScrapeScrapeStartSessionPostError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/scrape/scrape/start_session',
            ...options
        });
    }
    
    /**
     * Select files for torrent id, for this to be instant it requires files to be one of /manual/instant_availability response containers
     */
    public static manualSelect<ThrowOnError extends boolean = false>(options: Options<ManualSelectData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ManualSelectResponse, ManualSelectError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/scrape/scrape/select_files/{session_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Match container files to item
     */
    public static manualUpdateAttributes<ThrowOnError extends boolean = false>(options: Options<ManualUpdateAttributesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ManualUpdateAttributesResponse, ManualUpdateAttributesError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/scrape/scrape/update_attributes/{session_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Abort Manual Session
     */
    public static abortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPost<ThrowOnError extends boolean = false>(options: Options<AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostResponse, AbortManualSessionApiV1ScrapeScrapeAbortSessionSessionIdPostError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/scrape/scrape/abort_session/{session_id}',
            ...options
        });
    }
    
    /**
     * Complete a manual scraping session
     */
    public static completeManualSession<ThrowOnError extends boolean = false>(options: Options<CompleteManualSessionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CompleteManualSessionResponse, CompleteManualSessionError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/scrape/scrape/complete_session/{session_id}',
            ...options
        });
    }
    
}

export class SettingsService {
    /**
     * Get Settings Schema
     * Get the JSON schema for the settings.
     */
    public static getSettingsSchema<ThrowOnError extends boolean = false>(options?: Options<GetSettingsSchemaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSettingsSchemaResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/settings/schema',
            ...options
        });
    }
    
    /**
     * Load Settings
     */
    public static loadSettings<ThrowOnError extends boolean = false>(options?: Options<LoadSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<LoadSettingsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/settings/load',
            ...options
        });
    }
    
    /**
     * Save Settings
     */
    public static saveSettings<ThrowOnError extends boolean = false>(options?: Options<SaveSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<SaveSettingsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/settings/save',
            ...options
        });
    }
    
    /**
     * Get All Settings
     */
    public static getAllSettings<ThrowOnError extends boolean = false>(options?: Options<GetAllSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAllSettingsResponse, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/settings/get/all',
            ...options
        });
    }
    
    /**
     * Get Settings
     */
    public static getSettings<ThrowOnError extends boolean = false>(options: Options<GetSettingsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetSettingsResponse, GetSettingsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/settings/get/{paths}',
            ...options
        });
    }
    
    /**
     * Set All Settings
     */
    public static setAllSettings<ThrowOnError extends boolean = false>(options: Options<SetAllSettingsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SetAllSettingsResponse, SetAllSettingsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/settings/set/all',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Set Settings
     */
    public static setSettings<ThrowOnError extends boolean = false>(options: Options<SetSettingsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SetSettingsResponse, SetSettingsError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/settings/set',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class StreamService {
    /**
     * Get Event Types
     */
    public static getEventTypesApiV1StreamEventTypesGet<ThrowOnError extends boolean = false>(options?: Options<GetEventTypesApiV1StreamEventTypesGetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/stream/event_types',
            ...options
        });
    }
    
    /**
     * Stream Events
     */
    public static streamEventsApiV1StreamEventTypeGet<ThrowOnError extends boolean = false>(options: Options<StreamEventsApiV1StreamEventTypeGetData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<StreamEventsApiV1StreamEventTypeGetResponse, StreamEventsApiV1StreamEventTypeGetError, ThrowOnError>({
            security: [
                {
                    name: 'x-api-key',
                    type: 'apiKey'
                },
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/stream/{event_type}',
            ...options
        });
    }
    
}